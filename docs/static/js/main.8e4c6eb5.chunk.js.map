{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAIrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBJ,OAEI,sBAAMC,SAba,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAE5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAOlB,SACQ,uBACIO,KAAK,OACLC,MAAOT,EAEPU,SArBY,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCVtBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEiCC,UAAWH,GAF5C,+DAGFI,MAAMF,GAHJ,cAGbG,EAHa,gBAICA,EAAKC,OAJN,uBAIZC,EAJY,EAIZA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACtB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OACI,sBAAKc,UAAU,+DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAIrB,ECLwB,SAACA,GAIzB,MAA0Bd,mBAAS,CAC3BqB,KAAK,GACLa,SAAQ,IAFhB,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAfCC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GACHC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAGd,UAER,CAACpB,IAIAqB,EDrBuBM,CAAa3B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAEnB,OAEI,qCACI,oBAAIJ,UAAU,wCAAd,SAAuDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACf,qBAAKA,UAAU,YAAf,SAEWH,EAAOJ,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,eAEIA,GADEA,EAAIC,aEhBrBiB,EAAe,WAGrB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAGH,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAGQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACf,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MChBjC8B,IAASC,OACT,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8e4c6eb5.chunk.js","sourcesContent":["//rafc  para crear el import y el export\r\nimport React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n        \r\n        \r\n        const [inputValue, setInputValue] = useState('') \r\n\r\n       \r\n        const handleInputChange=(e)=>{\r\n            setInputValue(e.target.value);\r\n        }\r\n        const handleSubmit=(e)=>{\r\n            e.preventDefault();\r\n           \r\n            if(inputValue.trim().length>2){\r\n            \r\n            setCategories( cats => [inputValue,...cats,]);//primero insertar√° las nuevas categorias\r\n            setInputValue(''); \r\n          }\r\n        }\r\n\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}  \r\n                    \r\n                    onChange={handleInputChange} \r\n                />\r\n        </form >\r\n    )\r\n}\r\n  \r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async(category)=>{\r\n    //encodeURI  quita espacio para queno vaya tener problemas al buscar la categoria\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI (category)}&limit=10&api_key=fPBkqMTwbBoYbE7wbOg19zwadCISEYSn`\r\n    const resp=await fetch(url);\r\n    const {data} =await resp.json();//la palabra data aparece en la API\r\n\r\n    const gifs=data.map(img =>{\r\n        return {\r\n            id: img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url// el signo de interrogacion es para preguntar si trae imagenes haga lo del .down\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n  \r\n\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n \r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__rubberBand animate__delay-2s\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","//useEffect  permitira ejecutar el codigo de manera condicional\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n   \r\n    \r\n    //2. se importa aca esa funcion del HOOKS\r\n    const {data:images,loading} = useFetchGifs(category);//desestrucutura el state y solo usa el loading\r\n       \r\n    return (\r\n\r\n        <>\r\n            <h3 className=\"animate__animated animate__rubberBand\">{category}</h3>\r\n                {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n             <div className=\"card-grid\">\r\n                    {\r\n                        images.map(img =>(\r\n                        <GifGridItem \r\n                         key={img.id}\r\n                        {...img}/>\r\n                        ))\r\n                    }\r\n            \r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n\r\n//1 se adiciona esta HOOKS \r\nexport const useFetchGifs = (category) => {\r\n\r\n\r\n    //para informar  antes de los 3 minutos cuando aun no ha cargado\r\n    const [state, setstate] = useState({\r\n            data:[],\r\n            loading:true\r\n  \r\n    });\r\n\r\n     //cuando se carga el componente por primera vez lance la peticion para obtener los gifs y los coloca en las imagenes\r\n     useEffect( () =>{\r\n         getGifs(category)//se jejecute solo cuando el componente es renderizado por primera vez\r\n             .then(imgs =>{\r\n                setTimeout(()=>{\r\n                    setstate({\r\n                        data:imgs,\r\n                        loading:false\r\n                    });\r\n            \r\n                },3000);\r\n             })\r\n        },[category])//este es component default\r\n\r\n    \r\n\r\n    return state; //{data:[], loading:true};\r\n            \r\n}\r\n","import React, {useState}from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n      \r\n       const [categories, setCategories] = useState(['One Punch']);\r\n       \r\n     //la principal\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    \r\n                    categories.map(category =>(\r\n                            <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                            />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n<GifExpertApp />,\ndocument.getElementById('root')\n);\n\n\n"],"sourceRoot":""}